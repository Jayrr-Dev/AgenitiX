import React from 'react';
import { Trash2, ArrowRight, Zap } from 'lucide-react';
import type { AgenEdge, AgenNode } from '../../../flow-editor/types';
import { JsonHighlighter } from '../utils/JsonHighlighter';

interface EdgeInspectorProps {
  edge: AgenEdge;
  allNodes: AgenNode[];
  onDeleteEdge?: (edgeId: string) => void;
}

export const EdgeInspector: React.FC<EdgeInspectorProps> = ({ 
  edge, 
  allNodes, 
  onDeleteEdge 
}) => {
  // Find source and target nodes
  const sourceNode = allNodes.find(n => n.id === edge.source);
  const targetNode = allNodes.find(n => n.id === edge.target);

  // Get handle information
  const sourceHandle = edge.sourceHandle || 'default';
  const targetHandle = edge.targetHandle || 'default';

  // Enhanced data type detection
  const getActualDataType = (node: any, handle: string, isOutput: boolean) => {
    if (!node) return { label: 'Unknown', color: 'text-gray-500', value: null };

    // For default handles, try to infer the actual data type
    if (handle === 'default') {
      if (isOutput) {
        // Analyze the node's output data
        if (node.type === 'uppercaseNode' || node.type === 'textNode') {
          const outputValue = node.data?.text || '';
          return { 
            label: 'String', 
            color: 'text-blue-600 dark:text-blue-400',
            value: outputValue,
            actualType: typeof outputValue
          };
        }
        if (node.type === 'inputTesterNode') {
          const value = node.data?.value;
          const actualType = typeof value;
          if (actualType === 'boolean') {
            return { 
              label: 'Boolean', 
              color: 'text-green-600 dark:text-green-400',
              value: value,
              actualType
            };
          }
          if (actualType === 'string') {
            return { 
              label: 'String', 
              color: 'text-blue-600 dark:text-blue-400',
              value: value,
              actualType
            };
          }
          if (actualType === 'number') {
            return { 
              label: 'Number', 
              color: 'text-orange-600 dark:text-orange-400',
              value: value,
              actualType
            };
          }
        }
        if (node.type === 'counterNode') {
          return { 
            label: 'Number', 
            color: 'text-orange-600 dark:text-orange-400',
            value: node.data?.count || 0,
            actualType: 'number'
          };
        }
        if (node.type === 'outputnode') {
          // Output node shows whatever it receives
          return { 
            label: 'Any', 
            color: 'text-gray-600 dark:text-gray-400',
            value: 'Displays input',
            actualType: 'any'
          };
        }
        // Logic gates typically output boolean
        if (node.type?.startsWith('logic')) {
          return { 
            label: 'Boolean', 
            color: 'text-green-600 dark:text-green-400',
            value: node.data?.triggered || false,
            actualType: 'boolean'
          };
        }
        // Triggers typically output boolean
        if (node.type?.startsWith('trigger')) {
          return { 
            label: 'Boolean', 
            color: 'text-green-600 dark:text-green-400',
            value: node.data?.triggered || false,
            actualType: 'boolean'
          };
        }
      } else {
        // For input, we can infer expected type based on node type
        if (node.type === 'outputnode') {
          return { 
            label: 'Any', 
            color: 'text-gray-600 dark:text-gray-400',
            value: 'Accepts any type',
            actualType: 'any'
          };
        }
        if (node.type === 'uppercaseNode' || node.type === 'textConverterNode') {
          return { 
            label: 'String', 
            color: 'text-blue-600 dark:text-blue-400',
            value: 'Expects string',
            actualType: 'string'
          };
        }
        if (node.type?.startsWith('logic')) {
          return { 
            label: 'Boolean', 
            color: 'text-green-600 dark:text-green-400',
            value: 'Expects boolean',
            actualType: 'boolean'
          };
        }
        if (node.type === 'counterNode') {
          return { 
            label: 'Number', 
            color: 'text-orange-600 dark:text-orange-400',
            value: 'Expects number',
            actualType: 'number'
          };
        }
        if (node.type === 'delayNode') {
          return { 
            label: 'Any', 
            color: 'text-gray-600 dark:text-gray-400',
            value: 'Passes through input',
            actualType: 'any'
          };
        }
      }
    }

    // Handle typed handles
    const typeMap: Record<string, { label: string; color: string }> = {
      's': { label: 'String', color: 'text-blue-600 dark:text-blue-400' },
      'n': { label: 'Number', color: 'text-orange-600 dark:text-orange-400' },
      'b': { label: 'Boolean', color: 'text-green-600 dark:text-green-400' },
      'x': { label: 'Any', color: 'text-gray-600 dark:text-gray-400' },
      'j': { label: 'JSON', color: 'text-indigo-600 dark:text-indigo-400' },
      'a': { label: 'Array', color: 'text-pink-600 dark:text-pink-400' },
      'N': { label: 'BigInt', color: 'text-purple-600 dark:text-purple-400' },
      'f': { label: 'Float', color: 'text-yellow-600 dark:text-yellow-400' },
      'u': { label: 'Undefined', color: 'text-gray-400 dark:text-gray-500' },
      'S': { label: 'Symbol', color: 'text-yellow-700 dark:text-yellow-300' },
      'âˆ…': { label: 'Null', color: 'text-red-600 dark:text-red-400' },
    };
    
    const typeInfo = typeMap[handle] || { label: 'Unknown', color: 'text-gray-500' };
    return { ...typeInfo, value: null, actualType: handle };
  };

  const sourceType = getActualDataType(sourceNode, sourceHandle, true);
  const targetType = getActualDataType(targetNode, targetHandle, false);

  return (
    <div className="flex flex-col gap-3">
      {/* Edge Header */}
      <div className="border-b border-gray-200 dark:border-gray-700 pb-2">
        <div className="flex items-center justify-between">
          <h3 className="text-sm font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
            <Zap className="w-4 h-4 text-yellow-500" />
            Edge Connection
          </h3>
          
          {onDeleteEdge && (
            <button
              onClick={() => onDeleteEdge(edge.id)}
              className="flex items-center gap-1 px-2 py-1 text-xs bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 rounded hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
              title="Delete Edge"
            >
              <Trash2 className="w-3 h-3" />
              Delete
            </button>
          )}
        </div>
        
        <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
          Edge ID: {edge.id}
        </div>
      </div>

      {/* Connection Flow */}
      <div className="bg-gray-50 dark:bg-gray-800 rounded-md border p-3">
        <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
          Data Flow:
        </h4>
        
        <div className="flex items-center gap-2 text-sm">
          {/* Source Node */}
          <div className="flex-1 bg-white dark:bg-gray-700 rounded border p-2">
            <div className="font-medium text-gray-900 dark:text-gray-100">
              {sourceNode?.type || 'Unknown'} 
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">
              ID: {edge.source}
            </div>
            <div className={`text-xs font-mono ${sourceType.color}`}>
              Output: {sourceType.label}
            </div>
            {sourceType.value !== null && (
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1 p-1 bg-gray-50 dark:bg-gray-600 rounded">
                Value: {typeof sourceType.value === 'string' ? `"${sourceType.value}"` : String(sourceType.value)}
              </div>
            )}
          </div>

          {/* Arrow */}
          <ArrowRight className="w-5 h-5 text-gray-400 shrink-0" />

          {/* Target Node */}
          <div className="flex-1 bg-white dark:bg-gray-700 rounded border p-2">
            <div className="font-medium text-gray-900 dark:text-gray-100">
              {targetNode?.type || 'Unknown'}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">
              ID: {edge.target}
            </div>
            <div className={`text-xs font-mono ${targetType.color}`}>
              Input: {targetType.label}
            </div>
            {targetType.value !== null && (
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1 p-1 bg-gray-50 dark:bg-gray-600 rounded">
                {targetType.value}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Edge Properties */}
      <div className="flex-1 flex flex-col">
        <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
          Edge Properties:
        </h4>
        <div className="bg-gray-50 dark:bg-gray-800 rounded-md border p-3 overflow-y-auto flex-1">
          <JsonHighlighter 
            data={{
              id: edge.id,
              source: edge.source,
              target: edge.target,
              sourceHandle: edge.sourceHandle,
              targetHandle: edge.targetHandle,
              type: edge.type,
              animated: edge.animated,
              style: edge.style,
              data: edge.data,
              selected: edge.selected,
              hidden: edge.hidden,
              deletable: edge.deletable,
              focusable: edge.focusable,
            }} 
            className="w-full"
          />
        </div>
      </div>

      {/* Connection Status */}
      <div className="bg-blue-50 dark:bg-blue-900/30 rounded-md border border-blue-200 dark:border-blue-800 p-2">
        <div className="text-xs">
          <div className="font-medium text-blue-900 dark:text-blue-100 mb-1">
            Connection Analysis:
          </div>
          <div className="space-y-1 text-blue-800 dark:text-blue-200">
            <div>âœ“ Source node: {sourceNode ? 'Found' : 'Missing'}</div>
            <div>âœ“ Target node: {targetNode ? 'Found' : 'Missing'}</div>
            <div>âœ“ Data flow: {sourceType.label} â†’ {targetType.label}</div>
            <div>âœ“ Handle types: {sourceHandle === 'default' ? 'Auto-detected' : 'Typed'} â†’ {targetHandle === 'default' ? 'Auto-detected' : 'Typed'}</div>
            <div>âœ“ Connection: {edge.animated ? 'Animated' : 'Static'}</div>
            {sourceType.actualType && targetType.actualType && (
              <div className={sourceType.actualType === targetType.actualType || targetType.actualType === 'any' ? 'text-green-700 dark:text-green-300' : 'text-yellow-700 dark:text-yellow-300'}>
                {sourceType.actualType === targetType.actualType || targetType.actualType === 'any' 
                  ? 'âœ“ Type compatibility: Compatible' 
                  : 'âš  Type compatibility: May need conversion'}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}; 