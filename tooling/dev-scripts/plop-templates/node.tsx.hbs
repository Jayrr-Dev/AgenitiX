import type { NodeProps } from '@xyflow/react';
import { useState } from 'react';
import { z } from 'zod';

import { withNodeScaffold } from '@/features/business-logic-modern/infrastructure/node-core/withNodeScaffold';
import type { NodeSpec } from '@/features/business-logic-modern/infrastructure/node-core/NodeSpec';
import {
  createNodeValidator,
  CommonSchemas,
  reportValidationError,
  useNodeDataValidation
} from '@/features/business-logic-modern/infrastructure/node-core/validation';
import { SafeSchemas, createSafeInitialData } from '@/features/business-logic-modern/infrastructure/node-core/schema-helpers';
import { CATEGORIES } from '@/features/business-logic-modern/infrastructure/theming/categories';
import { EXPANDED_SIZES, COLLAPSED_SIZES } from '@/features/business-logic-modern/infrastructure/theming/sizing';
import { ExpandCollapseButton } from '@/components/nodes/ExpandCollapseButton';

// -- PLOP-INJECTED-IMPORTS --

/**
 * {{titleCase kind}} NODE - Schema-Driven Controls Implementation
 *
 * • Uses enhanced NodeSpec with automatic control generation
 * • Demonstrates scalable architecture for 400+ node types
 * • Provides type-safe data validation with Zod schema introspection
 * • Supports custom field configurations and validation rules
 * • Zero-maintenance control system with enterprise-grade validation
 *
 * Keywords: schema-driven, automatic-controls, scalable-architecture, type-safety, zero-maintenance
 */

/**
 * Enterprise-grade data schema for {{titleCase kind}} node
 * Define your node's data structure with validation rules
 * The schema will automatically generate appropriate controls in the Node Inspector
 */
const {{pascalCase kind}}DataSchema = z.object({
  // Default schema with common fields - customize as needed:
  text: SafeSchemas.text('Default text'),
  isEnabled: SafeSchemas.boolean(true),
  // Indicates whether the node is active in the flow engine (used by scaffolding/theme)
  isActive: SafeSchemas.boolean(false),

  // Add your specific fields here using SafeSchemas for automatic control generation:
  // Examples of different control types that will be auto-generated:

  // Text fields (generates text input or textarea based on field name)
  // description: SafeSchemas.optionalText(),
  // content: SafeSchemas.text('Default content'), // Will generate textarea

  // Number fields (generates number input with validation)
  // count: SafeSchemas.number(1, 1, 100),
  // delay: SafeSchemas.number(1000, 0, 10000),

  // Boolean fields (generates checkbox)
  // autoStart: SafeSchemas.boolean(false),
  // showPreview: SafeSchemas.boolean(true),

  // Enum fields (generates select dropdown)
  // priority: SafeSchemas.enum(['low', 'medium', 'high'], 'medium'),
  // format: SafeSchemas.enum(['json', 'xml', 'csv'], 'json'),

  // URL fields (generates URL input with validation)
  // endpoint: SafeSchemas.url(),
  // webhookUrl: SafeSchemas.url('https://example.com/webhook'),

  // Email fields (generates email input with validation)
  // notificationEmail: SafeSchemas.email(),

  // Date fields (generates date picker)
  // scheduledDate: SafeSchemas.date(),

  // JSON fields (generates JSON editor with syntax highlighting)
  // configuration: SafeSchemas.json({}),
  // metadata: SafeSchemas.json({ version: '1.0' }),

  // Array fields (generates JSON editor for arrays)
  // tags: SafeSchemas.array(z.string(), ['default']),
  // items: SafeSchemas.array(z.object({ name: z.string(), value: z.number() }), []),

}).strict(); // Prevents unexpected properties

type {{pascalCase kind}}Data = z.infer<typeof {{pascalCase kind}}DataSchema>;

// Create enterprise validator
const validateNodeData = createNodeValidator({{pascalCase kind}}DataSchema, '{{pascalCase kind}}');

/**
 * Enhanced Node specification with schema-driven controls
 */
const spec: NodeSpec = {
  kind: '{{camelCase kind}}',
  displayName: '{{camelCase kind}}',
  category: CATEGORIES.{{constantCase category}},
  size: {
    expanded: {{expandedSizeConstant expandedSize}},
    collapsed: {{collapsedSizeConstant collapsedSize}},
  },
  handles: [
    // Standard JSON input for programmatic control
    { id: 'json-input', code: 'j', position: 'top', type: 'target' },

    // Primary output handle using code
    { id: 'output', code: 's', position: 'right', type: 'source' },

    // Multiple handles on same side are automatically spaced
    // { id: 'input-1', code: 's', position: 'left', type: 'target' },
    // { id: 'input-2', code: 'n', position: 'left', type: 'target' },
    // { id: 'input-3', code: 'b', position: 'left', type: 'target' },

    // Boolean control for activation (if needed)
    { id: 'activate', code: 's', position: 'left', type: 'target' },
  ],
  inspector: {
    key: '{{pascalCase kind}}Inspector',
  },
  initialData: createSafeInitialData({{pascalCase kind}}DataSchema), // Auto-generated safe defaults

  // NEW: Schema reference for automatic control generation
  dataSchema: {{pascalCase kind}}DataSchema,

  // NEW: Control configuration for enhanced UX (optional customizations)
  controls: {
    autoGenerate: true, // Enable schema-driven control generation
    excludeFields: ['isActive'], // System fields excluded from controls

    // Optional: Custom field configurations to override auto-generated controls
    customFields: [
      // Example: Customize the text field to be a textarea
      {
        key: 'text',
        type: 'textarea',
        label: 'Text Output',
        placeholder: 'Enter the text this node will output...',
        description: 'This text will be passed to connected nodes when activated.',
        required: true,
        ui: {
          rows: 3,
        },
      },
      // Example: Customize the enabled field
      {
        key: 'isEnabled',
        type: 'boolean',
        label: 'Node Enabled',
        description: 'When disabled, this node will not process or output data.',
      },
    ],

    // Optional: Group related fields together
    fieldGroups: [
      {
        title: 'Configuration',
        fields: ['text'],
        collapsible: false,
      },
      {
        title: 'Settings',
        fields: ['isEnabled'],
        collapsible: true,
      },
    ],
  },
};

/**
 * {{camelCase kind}} Node Component
 *
 * Follows enterprise standards:
 * - Two visual states (collapsed/expanded)
 * - JSON input for programmatic control
 * - Type-safe data validation
 * - Error handling and reporting
 * - Metrics collection
 * - Schema-driven controls (automatic generation)
 */
const {{pascalCase kind}}NodeComponent = ({ data, id }: NodeProps) => {
  const [isExpanded, setExpanded] = useState(false);

  // Enterprise validation with comprehensive error handling
  const validationResult = validateNodeData(data);
  const nodeData = validationResult.data;

  // Report validation errors for monitoring
  if (!validationResult.success) {
    reportValidationError('{{pascalCase kind}}', id, validationResult.errors, {
      originalData: validationResult.originalData,
      component: '{{pascalCase kind}}NodeComponent',
    });
  }

  // Enterprise data validation hook for real-time updates
  const { updateData, getHealthScore } = useNodeDataValidation(
    {{pascalCase kind}}DataSchema,
    '{{pascalCase kind}}',
    nodeData,
    id
  );

  const onToggle = () => setExpanded((prev) => !prev);

  // Handle data updates with validation
  const handleDataUpdate = (updates: Partial<{{pascalCase kind}}Data>) => {
    try {
      const updatedData = updateData(updates);
      // TODO: Implement actual data persistence via React Flow store
      // For now, this is handled by the Node Inspector controls
    } catch (error) {
      console.error('Failed to update {{pascalCase kind}} node data:', error);
    }
  };

  // Use the spec.size for strict sizing
  const { expanded, collapsed } = spec.size;
  const nodeSize = isExpanded ? expanded : collapsed;
  const dims = nodeSize as { width: number | string; height: number | string };
  const width = typeof dims.width === 'number' ? `${dims.width}px` : dims.width;
  const height = typeof dims.height === 'number' ? `${dims.height}px` : dims.height;

  return (
    <div
      className={`relative bg-white dark:bg-neutral-900 rounded-lg shadow-md border border-neutral-200 dark:border-neutral-700 transition-all duration-200 ${
        isExpanded ? '' : 'flex items-center justify-center'
      }`}
      style={{ width, height, minWidth: width, minHeight: height }}
      data-testid="{{kebabCase kind}}-node"
    >
      {/* Expand/Collapse Button - always top left */}
      <ExpandCollapseButton showUI={isExpanded} onToggle={onToggle} size="sm" />

      {isExpanded ? (
        <div className="p-4 pt-8 w-full h-full">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-semibold">{{camelCase kind}}</h3>
              {process.env.NODE_ENV === 'development' && (
                <span className="text-xs text-gray-500 absolute top-2">
                  Health: {getHealthScore()}%
                </span>
              )}
            </div>

            {/* Schema-driven controls are now handled by Node Inspector */}
            <div className="text-xs text-gray-500 italic">
              Configure this node using the Node Inspector panel →
            </div>

            {/* Show current values for reference */}
            <div className="space-y-2 p-2 bg-gray-50 dark:bg-gray-800 rounded">
              <div className="text-xs font-medium">Current Configuration:</div>
              <div className="text-xs">
                <div>Text: "{nodeData.text}"</div>
                <div>Enabled: {nodeData.isEnabled ? "Yes" : "No"}</div>
                {/* Add more fields as needed */}
              </div>
            </div>

            {/* Optional: Add node-specific UI that's not part of controls */}
            {/*
            <div className="mt-4">
              <div className="text-xs font-medium mb-2">Node Output Preview:</div>
              <div className="p-2 bg-blue-50 dark:bg-blue-900/20 rounded text-xs font-mono">
                {nodeData.isEnabled ? nodeData.text : "(disabled)"}
              </div>
            </div>
            */}
          </div>
        </div>
      ) : (
        <div className="flex items-center justify-center w-full h-full">
          {/* Collapsed state icon or minimal content */}
          <span className="text-2xl" aria-label="{{titleCase kind}} Node">
            🔧
          </span>
        </div>
      )}
    </div>
  );
};

export default withNodeScaffold(spec, {{pascalCase kind}}NodeComponent);

// Export spec for registry access
export { spec };
