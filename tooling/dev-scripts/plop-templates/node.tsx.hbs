/**
 * {{titleCase kind}} NODE - Unified theming node template
 *
 * â€¢ Clean, simple UI with schema-driven controls in Node Inspector
 * â€¢ Unified theming system with semantic tokens for consistency
 * â€¢ Type-safe data validation with Zod schema
 * â€¢ Zero-maintenance control system with automatic light/dark mode
 * â€¢ Enterprise-grade backend safety
 *
 * Keywords: {{kebabCase kind}}, unified-theming, schema-driven, type-safe, semantic-tokens
 */

import type { NodeProps } from '@xyflow/react';
import { useState } from 'react';
import { z } from 'zod';

import { withNodeScaffold } from '@/features/business-logic-modern/infrastructure/node-core/withNodeScaffold';
import type { NodeSpec } from '@/features/business-logic-modern/infrastructure/node-core/NodeSpec';
import {
  createNodeValidator,
  CommonSchemas,
  reportValidationError,
  useNodeDataValidation
} from '@/features/business-logic-modern/infrastructure/node-core/validation';
import { SafeSchemas, createSafeInitialData } from '@/features/business-logic-modern/infrastructure/node-core/schema-helpers';
import { CATEGORIES } from '@/features/business-logic-modern/infrastructure/theming/categories';
import { EXPANDED_SIZES, COLLAPSED_SIZES } from '@/features/business-logic-modern/infrastructure/theming/sizing';
import { ExpandCollapseButton } from '@/components/nodes/ExpandCollapseButton';

// -- PLOP-INJECTED-IMPORTS --

/**
 * Data schema for {{titleCase kind}} node
 * Define your node's data structure - controls are automatically generated
 */
const {{pascalCase kind}}DataSchema = z.object({
  // Basic fields - customize as needed
  text: SafeSchemas.text('Default text'),
  isEnabled: SafeSchemas.boolean(true),
  isActive: SafeSchemas.boolean(false),

  // Add your fields here - controls are auto-generated:
  // description: SafeSchemas.optionalText(),
  // count: SafeSchemas.number(1, 1, 100),
  // priority: SafeSchemas.enum(['low', 'medium', 'high'], 'medium'),
}).strict();

type {{pascalCase kind}}Data = z.infer<typeof {{pascalCase kind}}DataSchema>;

// Create enterprise validator
const validateNodeData = createNodeValidator({{pascalCase kind}}DataSchema, '{{pascalCase kind}}');

/**
 * Node specification with schema-driven controls
 */
const spec: NodeSpec = {
  kind: '{{camelCase kind}}',
  displayName: '{{camelCase kind}}',
  category: CATEGORIES.{{constantCase category}},
  size: {
    expanded: {{expandedSizeConstant expandedSize}},
    collapsed: {{collapsedSizeConstant collapsedSize}},
  },
  handles: [
    { id: 'json-input', code: 'j', position: 'top', type: 'target' },
    { id: 'output', code: 's', position: 'right', type: 'source' },
    { id: 'activate', code: 'b', position: 'left', type: 'target' },
  ],
  inspector: {
    key: '{{pascalCase kind}}Inspector',
  },
  initialData: createSafeInitialData({{pascalCase kind}}DataSchema),
  dataSchema: {{pascalCase kind}}DataSchema,
};

/**
 * Category-specific background mapping
 */
const CATEGORY_BACKGROUNDS = {
  CREATE: "bg-[var(--node-create-bg)]",
  VIEW: "bg-[var(--node-view-bg)]",
  TRIGGER: "bg-[var(--node-trigger-bg)]",
  TEST: "bg-[var(--node-test-bg)]",
  CYCLE: "bg-[var(--node-cycle-bg)]",
} as const;

/**
 * Category-specific text color mapping
 */
const CATEGORY_TEXT_COLORS = {
  CREATE: {
    primary: "text-[var(--node-create-text)]",
    secondary: "text-[var(--node-create-text-secondary)]",
  },
  VIEW: {
    primary: "text-[var(--node-view-text)]",
    secondary: "text-[var(--node-view-text-secondary)]",
  },
  TRIGGER: {
    primary: "text-[var(--node-trigger-text)]",
    secondary: "text-[var(--node-trigger-text-secondary)]",
  },
  TEST: {
    primary: "text-[var(--node-test-text)]",
    secondary: "text-[var(--node-test-text-secondary)]",
  },
  CYCLE: {
    primary: "text-[var(--node-cycle-text)]",
    secondary: "text-[var(--node-cycle-text-secondary)]",
  },
} as const;

/**
 * Category-specific border color mapping
 */
const CATEGORY_BORDER_COLORS = {
  CREATE: {
    default: "border-[var(--node-create-border)]",
    hover: "hover:border-[var(--node-create-border-hover)]",
  },
  VIEW: {
    default: "border-[var(--node-view-border)]",
    hover: "hover:border-[var(--node-view-border-hover)]",
  },
  TRIGGER: {
    default: "border-[var(--node-trigger-border)]",
    hover: "hover:border-[var(--node-trigger-border-hover)]",
  },
  TEST: {
    default: "border-[var(--node-test-border)]",
    hover: "hover:border-[var(--node-test-border-hover)]",
  },
  CYCLE: {
    default: "border-[var(--node-cycle-border)]",
    hover: "hover:border-[var(--node-cycle-border-hover)]",
  },
} as const;

/**
 * Unified theming constants using semantic tokens
 * - Category-specific backgrounds for visual distinction
 * - Neutral borders for clean, consistent appearance
 * - Category-appropriate text colors for readability
 */
const UNIFIED_NODE_STYLES = {
  // Container styles with semantic tokens
  container: {
    base: "relative rounded-lg shadow-md border transition-all duration-200",
    // Background and border determined dynamically by category
    expanded: "",
    collapsed: "flex items-center justify-center",
  },

  // Content area styles
  content: {
    expanded: "p-4 pt-8 w-full h-full flex flex-col",
    collapsed: "flex items-center justify-center w-full h-full",
  },

  // Header styles
  header: {
    container: "flex items-center justify-between mb-3",
    // Title and health colors determined dynamically by category
  },

  // Main content styles
  main: {
    container: "flex-1 flex items-center justify-center",
    content: "text-center",
    icon: "text-2xl mb-2",
    // Text color determined dynamically by category
  },

  // Collapsed state styles
  collapsed: {
    icon: "text-2xl",
  },
} as const;

/**
 * {{camelCase kind}} Node Component
 *
 * Unified theming with semantic tokens:
 * - Consistent styling across all nodes using design system
 * - Automatic light/dark mode support
 * - Schema-driven controls available in Node Inspector
 * - Maintains enterprise validation and type safety
 */
const {{pascalCase kind}}NodeComponent = ({ data, id }: NodeProps) => {
  const [isExpanded, setExpanded] = useState(false);

  // Enterprise validation with comprehensive error handling
  const validationResult = validateNodeData(data);
  const nodeData = validationResult.data;

  // Report validation errors for monitoring
  if (!validationResult.success) {
    reportValidationError('{{pascalCase kind}}', id, validationResult.errors, {
      originalData: validationResult.originalData,
      component: '{{pascalCase kind}}NodeComponent',
    });
  }

  // Enterprise data validation hook for real-time updates
  const { getHealthScore } = useNodeDataValidation(
    {{pascalCase kind}}DataSchema,
    '{{pascalCase kind}}',
    nodeData,
    id
  );

  const onToggle = () => setExpanded((prev) => !prev);

  // Use the spec.size for strict sizing
  const { expanded, collapsed } = spec.size;
  const nodeSize = isExpanded ? expanded : collapsed;
  const dims = nodeSize as { width: number | string; height: number | string };
  const width = typeof dims.width === 'number' ? `${dims.width}px` : dims.width;
  const height = typeof dims.height === 'number' ? `${dims.height}px` : dims.height;

  // Get category-specific styling
  const categoryKey = spec.category as keyof typeof CATEGORY_BACKGROUNDS;
  const categoryBackground = CATEGORY_BACKGROUNDS[categoryKey] || CATEGORY_BACKGROUNDS.CREATE;
  const categoryTextColors = CATEGORY_TEXT_COLORS[categoryKey] || CATEGORY_TEXT_COLORS.CREATE;
  const categoryBorderColors = CATEGORY_BORDER_COLORS[categoryKey] || CATEGORY_BORDER_COLORS.CREATE;

  // Combine unified styles with category-specific background and borders
  const containerClasses = [
    UNIFIED_NODE_STYLES.container.base,
    categoryBackground,
    categoryBorderColors.default,
    categoryBorderColors.hover,
    isExpanded ? UNIFIED_NODE_STYLES.container.expanded : UNIFIED_NODE_STYLES.container.collapsed,
  ].join(' ');

  return (
    <div
      className={containerClasses}
      style={{ width, height, minWidth: width, minHeight: height }}
      data-testid="{{kebabCase kind}}-node"
    >
      <ExpandCollapseButton showUI={isExpanded} onToggle={onToggle} size="sm" />

      {isExpanded ? (
        <div className={UNIFIED_NODE_STYLES.content.expanded}>
          <div className={UNIFIED_NODE_STYLES.header.container}>
            <h3 className={`text-sm font-semibold ${categoryTextColors.primary}`}>{{camelCase kind}}</h3>
            {process.env.NODE_ENV === 'development' && (
              <span className={`text-xs ${categoryTextColors.secondary}`}>
                Health: {getHealthScore()}%
              </span>
            )}
          </div>

          {/* Add your node-specific UI here */}
          <div className={UNIFIED_NODE_STYLES.main.container}>
            <div className={UNIFIED_NODE_STYLES.main.content}>
              <div className={UNIFIED_NODE_STYLES.main.icon}>ðŸ”§</div>
              <div className={`text-xs ${categoryTextColors.secondary}`}>
                {nodeData.isEnabled ? nodeData.text : 'Disabled'}
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className={UNIFIED_NODE_STYLES.content.collapsed}>
          <span className={UNIFIED_NODE_STYLES.collapsed.icon} aria-label="{{titleCase kind}} Node">
            ðŸ”§
          </span>
        </div>
      )}
    </div>
  );
};

export default withNodeScaffold(spec, {{pascalCase kind}}NodeComponent);

// Export spec for registry access
export { spec };
