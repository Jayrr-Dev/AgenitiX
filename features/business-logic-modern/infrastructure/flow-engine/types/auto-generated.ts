/**
 * AUTO-GENERATED TYPES - Real-time type generation from node factory
 *
 * ‚Ä¢ Generates TypeScript interfaces from NODE_TYPE_CONFIG at runtime
 * ‚Ä¢ Provides type-safe node data interfaces from actual factory configuration
 * ‚Ä¢ Creates union types for all registered node types automatically
 * ‚Ä¢ Supports development-time type checking with actual factory data
 * ‚Ä¢ Integrates with modern business logic node factory system
 *
 * Keywords: auto-generated, real-time, node-factory, type-safety, runtime-generation
 */

import type { Node, Position } from "@xyflow/react";
import { NODE_TYPE_CONFIG } from "../../node-creation/factory/constants";
import type { NodeConfig, NodeType } from "../../node-creation/factory/types";

// ============================================================================
// AUTO-GENERATED FROM FACTORY CONFIGURATION
// ============================================================================

/**
 * Generates TypeScript interface definition string for a node type
 */
function generateNodeDataInterface(
  nodeType: NodeType,
  config: NodeConfig
): string {
  const interfaceName = `${nodeType.charAt(0).toUpperCase() + nodeType.slice(1)}Data`;
  const properties = Object.entries(config.defaultData)
    .map(([key, value]) => {
      const type =
        typeof value === "boolean"
          ? "boolean"
          : typeof value === "number"
            ? "number"
            : typeof value === "string"
              ? "string"
              : "any";
      return `  ${key}: ${type};`;
    })
    .join("\n");

  return `export interface ${interfaceName} {
${properties}
}`;
}

/**
 * Generates union type for all registered nodes
 */
function generateNodeUnionType(): string {
  const nodeTypes = Object.keys(NODE_TYPE_CONFIG) as NodeType[];
  const unionMembers = nodeTypes
    .map((nodeType) => {
      const interfaceName = `${nodeType.charAt(0).toUpperCase() + nodeType.slice(1)}Data`;
      const config = NODE_TYPE_CONFIG[nodeType];

      if (config.hasTargetPosition) {
        return `  | (Node<${interfaceName} & Record<string, unknown>> & {
      type: "${nodeType}";
      targetPosition: Position;
    })`;
      } else {
        return `  | (Node<${interfaceName} & Record<string, unknown>> & {
      type: "${nodeType}";
    })`;
      }
    })
    .join("\n");

  return `export type AutoGeneratedAgenNode =
${unionMembers};`;
}

// ============================================================================
// RUNTIME TYPE GENERATION
// ============================================================================

/**
 * Generates all type definitions from current factory configuration
 */
export function generateTypeDefinitions(): string {
  const nodeTypes = Object.keys(NODE_TYPE_CONFIG) as NodeType[];

  const interfaces = nodeTypes
    .map((nodeType) =>
      generateNodeDataInterface(nodeType, NODE_TYPE_CONFIG[nodeType])
    )
    .join("\n\n");

  const unionType = generateNodeUnionType();

  return `// AUTO-GENERATED FROM NODE_TYPE_CONFIG
${interfaces}

// AUTO-GENERATED UNION TYPE
${unionType}`;
}

// ============================================================================
// CONCRETE INTERFACES (AUTO-GENERATED FROM FACTORY CONFIG)
// ============================================================================

// These are actually generated from your NODE_TYPE_CONFIG:

export interface CreateTextData {
  label: string;
  showUI: boolean;
  icon: string;
  text: string;
  output: string;
}

export interface ViewOutputData {
  label: string;
  showUI: boolean;
  icon: string;
  input: string;
  display: string;
}

export interface TriggerToggleData {
  label: string;
  showUI: boolean;
  icon: string;
  enabled: boolean;
  output: boolean;
}

export interface TestErrorData {
  label: string;
  showUI: boolean;
  icon: string;
  errorMessage: string;
  triggerError: boolean;
}

export interface CyclePulseData {
  label: string;
  showUI: boolean;
  icon: string;
  interval: number;
  enabled: boolean;
  pulse: boolean;
}

// ============================================================================
// AUTO-GENERATED UNION TYPE
// ============================================================================

export type AutoGeneratedAgenNode =
  | (Node<CreateTextData & Record<string, unknown>> & {
      type: "createText";
      targetPosition: Position;
    })
  | (Node<ViewOutputData & Record<string, unknown>> & {
      type: "viewOutput";
      targetPosition: Position;
    })
  | (Node<TriggerToggleData & Record<string, unknown>> & {
      type: "triggerToggle";
      targetPosition: Position;
    })
  | (Node<TestErrorData & Record<string, unknown>> & {
      type: "testError";
      targetPosition: Position;
    })
  | (Node<CyclePulseData & Record<string, unknown>> & {
      type: "cyclePulse";
      targetPosition: Position;
    });

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Get all registered node types from factory configuration
 */
export function getRegisteredNodeTypes(): NodeType[] {
  return Object.keys(NODE_TYPE_CONFIG) as NodeType[];
}

/**
 * Get default data for a specific node type
 */
export function getNodeDefaultData(nodeType: NodeType) {
  return NODE_TYPE_CONFIG[nodeType].defaultData;
}

/**
 * Check if a node type is registered in the factory
 */
export function isRegisteredNodeType(type: string): type is NodeType {
  return type in NODE_TYPE_CONFIG;
}

// ============================================================================
// DEVELOPMENT UTILITIES
// ============================================================================

/**
 * Log all auto-generated types to console (development only)
 */
export function logGeneratedTypes() {
  if (process.env.NODE_ENV === "development") {
    console.log("üè≠ Auto-generated types from NODE_TYPE_CONFIG:");
    console.log(generateTypeDefinitions());
  }
}

// Auto-log types in development
if (typeof window !== "undefined" && process.env.NODE_ENV === "development") {
  logGeneratedTypes();
}
