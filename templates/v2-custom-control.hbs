import React from "react";
import { NodeInspectorProps } from "@/features/business-logic-modern/infrastructure/node-inspector/types";

interface {{componentName}}ControlProps extends NodeInspectorProps {
  // Add any specific props for this control
}

const {{componentName}}Control: React.FC<{{componentName}}ControlProps> = ({
  node,
  updateNodeData
}) => {
  const data = node.data as any; // TODO: Replace with proper type

  return (
    <div className="space-y-4">
      {/* V2 Control Header */}
      <div className="flex items-center gap-2 pb-2 border-b border-gray-200 dark:border-gray-600">
        <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">
          {{displayName}} Configuration
        </h3>
        <div className="text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded">
          V2
        </div>
      </div>

      {/* Custom Controls */}
      <div className="space-y-3">
        {/* Example: Text Input */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Configuration Value
          </label>
          <input
            type="text"
            value={data.configValue || ""}
            onChange={(e) => updateNodeData({ ...data, configValue: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-sm"
            placeholder="Enter configuration value..."
          />
        </div>

        {/* Example: Toggle */}
        <div className="flex items-center justify-between">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Enable Feature
          </label>
          <button
            onClick={() => updateNodeData({ ...data, enabled: !data.enabled })}
            className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${
              data.enabled ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-600'
            }`}
          >
            <span
              className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${
                data.enabled ? 'translate-x-5' : 'translate-x-1'
              }`}
            />
          </button>
        </div>

        {/* Example: Dropdown */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Mode
          </label>
          <select
            value={data.mode || "default"}
            onChange={(e) => updateNodeData({ ...data, mode: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-sm"
          >
            <option value="default">Default</option>
            <option value="advanced">Advanced</option>
            <option value="expert">Expert</option>
          </select>
        </div>

        {/* Example: Number Input */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Timeout (ms)
          </label>
          <input
            type="number"
            value={data.timeout || 5000}
            onChange={(e) => updateNodeData({ ...data, timeout: parseInt(e.target.value) })}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-sm"
            min="0"
            step="100"
          />
        </div>

        {/* Example: JSON Configuration */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Advanced Configuration (JSON)
          </label>
          <textarea
            value={JSON.stringify(data.config || {}, null, 2)}
            onChange={(e) => {
              try {
                const config = JSON.parse(e.target.value);
                updateNodeData({ ...data, config });
              } catch (error) {
                // Invalid JSON, ignore for now
                console.warn("Invalid JSON in configuration:", error);
              }
            }}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 font-mono text-sm"
            rows={6}
            placeholder="{}"
          />
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Enter valid JSON configuration
          </p>
        </div>
      </div>

      {/* V2 Metadata */}
      <div className="pt-3 border-t border-gray-200 dark:border-gray-600">
        <div className="text-xs text-gray-500 dark:text-gray-400 space-y-1">
          <div>Control Type: V2 Custom Control</div>
          <div>Node Type: {node.type}</div>
          <div>V2 Version: {data._v2RegistryVersion || "2.0.0"}</div>
        </div>
      </div>
    </div>
  );
};

export default {{componentName}}Control;
