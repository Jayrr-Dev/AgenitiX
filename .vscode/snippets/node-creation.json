{
	"V2 Node Component": {
		"prefix": "v2node",
		"description": "Create a complete V2 node component with all features",
		"body": [
			"import React, { useState, useEffect } from \"react\";",
			"import { createNodeComponent } from \"@/features/business-logic-modern/infrastructure/node-creation/factory\";",
			"import {",
			"  ready,",
			"  Node,",
			"  normaliseHandleType,",
			"} from \"@/features/business-logic-modern/infrastructure/node-creation/json-node-registry/unifiedRegistry\";",
			"import { BaseNodeData } from \"@/features/business-logic-modern/infrastructure/flow-engine/types/nodeData\";",
			"import { Position } from \"@xyflow/react\";",
			"",
			"// V2 Registry Hooks",
			"function useV2Registry() {",
			"  const [isReady, setIsReady] = useState(false);",
			"  const [error, setError] = useState<string | null>(null);",
			"",
			"  useEffect(() => {",
			"    ready()",
			"      .then(() => setIsReady(true))",
			"      .catch((err) => setError(err.message));",
			"  }, []);",
			"",
			"  return { isReady, error };",
			"}",
			"",
			"// Data Interface",
			"interface ${1:NodeName}Data extends BaseNodeData {",
			"  ${2:field}: ${3:string};",
			"  // V2 metadata",
			"  _v2RegistryVersion?: string;",
			"  _v2CreatedAt?: number;",
			"}",
			"",
			"// V2 Fallback Configuration",
			"function createV2FallbackConfiguration() {",
			"  return {",
			"    nodeType: \"${4:nodeType}\" as const,",
			"    category: \"${5:create}\" as const,",
			"    displayName: \"${6:Node Display Name}\",",
			"    defaultData: {",
			"      ${2:field}: ${7:\"\"},",
			"      _v2RegistryVersion: \"2.0.0\",",
			"      _v2CreatedAt: Date.now(),",
			"    } as ${1:NodeName}Data,",
			"    size: { width: 240, height: 120 },",
			"    handles: [",
			"      {",
			"        id: \"${8:output}\",",
			"        dataType: \"${9:string}\" as const,",
			"        position: Position.${10:Right},",
			"        type: \"${11:source}\" as const,",
			"      },",
			"    ],",
			"  };",
			"}",
			"",
			"const ${1:NodeName} = createNodeComponent<${1:NodeName}Data>({",
			"  ...createV2FallbackConfiguration(),",
			"",
			"  processLogic: ({ data, updateNodeData, id, setError }) => {",
			"    ${12:// Your processing logic here}",
			"  },",
			"",
			"  renderCollapsed: ({ data, error, updateNodeData, id }) => {",
			"    const { isReady, error: registryError } = useV2Registry();",
			"",
			"    return (",
			"      <div className=\"p-3 bg-white dark:bg-gray-800 border rounded-lg\">",
			"        {/* V2 Status */}",
			"        {!isReady && (",
			"          <div className=\"text-xs text-yellow-600 mb-1\">‚è≥ V2 Loading...</div>",
			"        )}",
			"        {isReady && (",
			"          <div className=\"text-xs text-green-600 mb-1\">‚úÖ V2 Ready</div>",
			"        )}",
			"        ",
			"        <h3 className=\"text-sm font-medium\">${6:Node Display Name}</h3>",
			"        <div className=\"text-sm text-gray-600\">{data.${2:field} || \"No data\"}</div>",
			"      </div>",
			"    );",
			"  },",
			"",
			"  renderExpanded: ({ data, error, updateNodeData, id }) => {",
			"    return (",
			"      <div className=\"p-4 bg-white dark:bg-gray-800 border rounded-lg\">",
			"        <h3 className=\"text-lg font-medium mb-3\">${6:Node Display Name}</h3>",
			"        ",
			"        <div className=\"space-y-3\">",
			"          <div>",
			"            <label className=\"block text-sm font-medium mb-1\">${13:Field Label}</label>",
			"            <input",
			"              type=\"text\"",
			"              value={data.${2:field} || \"\"}",
			"              onChange={(e) => updateNodeData({ ...data, ${2:field}: e.target.value })}",
			"              className=\"w-full px-3 py-2 border rounded-md\"",
			"              placeholder=\"${14:Enter value...}\"",
			"            />",
			"          </div>",
			"        </div>",
			"      </div>",
			"    );",
			"  },",
			"});",
			"",
			"export default ${1:NodeName};"
		]
	},

	"V2 Inspector Control": {
		"prefix": "v2inspector",
		"description": "Create a V2 inspector control component",
		"body": [
			"import React from \"react\";",
			"import { NodeInspectorProps } from \"@/features/business-logic-modern/infrastructure/node-inspector/types\";",
			"",
			"interface ${1:ControlName}Props extends NodeInspectorProps {",
			"  // Add specific props if needed",
			"}",
			"",
			"const ${1:ControlName}: React.FC<${1:ControlName}Props> = ({ node, updateNodeData }) => {",
			"  const data = node.data as any; // TODO: Replace with proper type",
			"",
			"  return (",
			"    <div className=\"space-y-4\">",
			"      {/* V2 Control Header */}",
			"      <div className=\"flex items-center gap-2 pb-2 border-b\">",
			"        <h3 className=\"text-sm font-medium\">${2:Control Title}</h3>",
			"        <div className=\"text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded\">V2</div>",
			"      </div>",
			"",
			"      {/* Controls */}",
			"      <div className=\"space-y-3\">",
			"        <div>",
			"          <label className=\"block text-sm font-medium mb-1\">${3:Field Label}</label>",
			"          <input",
			"            type=\"${4:text}\"",
			"            value={data.${5:field} || \"\"}",
			"            onChange={(e) => updateNodeData({ ...data, ${5:field}: e.target.value })}",
			"            className=\"w-full px-3 py-2 border rounded-md\"",
			"            placeholder=\"${6:Enter value...}\"",
			"          />",
			"        </div>",
			"        ${7:// Add more controls here}",
			"      </div>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ControlName};"
		]
	},

	"V2 Handle Configuration": {
		"prefix": "v2handles",
		"description": "Create handle configuration for V2 nodes",
		"body": [
			"handles: [",
			"  {",
			"    id: \"${1:input}\",",
			"    dataType: \"${2:string}\" as const,",
			"    position: Position.${3:Left},",
			"    type: \"${4:target}\" as const,",
			"    description: \"${5:Input description}\",",
			"  },",
			"  {",
			"    id: \"${6:output}\",",
			"    dataType: \"${7:string}\" as const,",
			"    position: Position.${8:Right},",
			"    type: \"${9:source}\" as const,",
			"    description: \"${10:Output description}\",",
			"  },",
			"],"
		]
	},

	"V2 Registry Entry": {
		"prefix": "v2registry",
		"description": "Create a registry entry for V2 nodes",
		"body": [
			"${1:nodeType}: {",
			"  nodeType: \"${1:nodeType}\",",
			"  category: \"${2:create}\",",
			"  displayName: \"${3:Node Display Name}\",",
			"  description: \"${4:Node description}\",",
			"  icon: \"${5:icon-name}\",",
			"  folder: \"${6:main}\",",
			"  order: ${7:1},",
			"",
			"  // Dimensions",
			"  iconWidth: 240,",
			"  iconHeight: 120,",
			"  expandedWidth: 240,",
			"  expandedHeight: 120,",
			"",
			"  // UI Configuration",
			"  hasToggle: true,",
			"  isEnabled: true,",
			"  isExperimental: true, // V2 node",
			"",
			"  // Handles",
			"  handles: [",
			"    {",
			"      id: \"${8:output}\",",
			"      type: \"${9:source}\",",
			"      position: \"${10:right}\",",
			"      dataType: \"${11:string}\",",
			"      description: \"${12:Output description}\",",
			"    },",
			"  ],",
			"",
			"  // Default data with V2 metadata",
			"  defaultData: {",
			"    ${13:field}: ${14:\"\"},",
			"    _v2RegistryVersion: \"2.0.0\",",
			"    _v2CreatedAt: Date.now(),",
			"  },",
			"},"
		]
	},

	"V2 Data Interface": {
		"prefix": "v2interface",
		"description": "Create a data interface for V2 nodes",
		"body": [
			"interface ${1:NodeName}Data extends BaseNodeData {",
			"  ${2:field}: ${3:string};",
			"  ${4:// Add more fields as needed}",
			"  ",
			"  // V2 metadata",
			"  _v2RegistryVersion?: string;",
			"  _v2CreatedAt?: number;",
			"}"
		]
	},

	"V2 Status Indicator": {
		"prefix": "v2status",
		"description": "Add V2 status indicator to components",
		"body": [
			"const { isReady, error: registryError } = useV2Registry();",
			"",
			"{/* V2 Status Indicator */}",
			"{registryError && (",
			"  <div className=\"text-xs text-red-600 mb-1 p-1 bg-red-50 rounded\">",
			"    üö´ V2 Registry Error: {registryError}",
			"  </div>",
			")}",
			"{!isReady && !registryError && (",
			"  <div className=\"text-xs text-yellow-600 mb-1 p-1 bg-yellow-50 rounded\">",
			"    ‚è≥ V2 Registry Loading...",
			"  </div>",
			")}",
			"{isReady && (",
			"  <div className=\"text-xs text-green-600 mb-1 p-1 bg-green-50 rounded\">",
			"    ‚úÖ V2 Registry Ready",
			"  </div>",
			")}"
		]
	},

	"V2 Hook Usage": {
		"prefix": "v2hooks",
		"description": "Use V2 registry hooks in components",
		"body": [
			"const { isReady, error } = useV2Registry();",
			"const { metadata, loading } = useV2NodeMetadata(\"${1:nodeType}\");",
			"",
			"useEffect(() => {",
			"  if (isReady && metadata) {",
			"    ${2:// Registry is ready and metadata loaded}",
			"  }",
			"}, [isReady, metadata]);"
		]
	},

	"V2 Fallback Config": {
		"prefix": "v2fallback",
		"description": "Create V2 fallback configuration function",
		"body": [
			"function createV2FallbackConfiguration() {",
			"  return {",
			"    nodeType: \"${1:nodeType}\" as const,",
			"    category: \"${2:create}\" as const,",
			"    displayName: \"${3:Display Name}\",",
			"    defaultData: {",
			"      ${4:field}: ${5:\"\"},",
			"      _v2RegistryVersion: \"2.0.0\",",
			"      _v2CreatedAt: Date.now(),",
			"    } as ${6:NodeType}Data,",
			"    size: { width: 240, height: 120 },",
			"    handles: [",
			"      ${7:// Add handles here}",
			"    ],",
			"  };",
			"}"
		]
	}
}
